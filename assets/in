#!/bin/bash

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

destination=$1
payload=$(mktemp $TMPDIR/vault-resource-request.XXXXXX)
cat > $payload <&0

url=$(jq -r '.source.url // "https://vault.service.consul:8200"' < $payload)
skip_verify=$(jq -r '.source.tls_skip_verify // ""' < $payload)
expose_token=$(jq -r '.source.expose_token // ""' < $payload)
paths=($(jq -r '.params.paths // [] | .[]' < $payload))
auth_method=$(jq -r '.source.auth_method // "Token"' < $payload)
# Used of Token authentication
token=$(jq -r '.source.token // ""' < $payload)
# Used for AppRole authentication
role_id=$(jq -r '.source.role_id // ""' < $payload)
secret_id=$(jq -r '.source.secret_id // ""' < $payload)
# Used of GitHub authentication
github_pat=$(jq -r '.source.github_personal_access_token // ""' < $payload)

echo "INFO: Reading secrets from: ${paths[*]}"

export VAULT_ADDR=${url}
if [ ! -z "${skip_verify}" ]; then
    echo "WARN: Disabling TLS verification for Vault"
    export VAULT_SKIP_VERIFY=1
fi

if [ "${auth_method}" = "AppRole" ]; then
    login_approle ${role_id} ${secret_id}
elif [ "${auth_method}" = "GitHub" ]; then
    login_github ${github_pat}
elif [ "${auth_method}" = "Token" ]; then
    login_token ${token}
else
    login_token ${token}
fi

for path in "${paths[@]}"; do
    mkdir -p ${destination}/$(dirname ${path})
    get_secret ${path} > ${destination}/${path}.json
done

if [ ! -z "${expose_token}" ]; then
    cp ~/.vault-token ${destination}/token
fi

version="{\"date\": \"$(date +%s)\"}"
jq -n "{
  version: ${version}
}" >&3
